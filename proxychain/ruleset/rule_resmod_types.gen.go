
package ruleset_v2
// DO NOT EDIT THIS FILE. It is automatically generated by ladder/proxychain/codegen/codegen.go
// The purpose of this is serialization of rulesets from JSON or YAML into functional options suitable
// for use in proxychains.

import (
	"ladder/proxychain"
	tx "ladder/proxychain/responsemodifiers"
)

type ResponseModifierFactory func(params ...string) proxychain.ResponseModification

var rsmModMap map[string]ResponseModifierFactory

func init() {
	rsmModMap = make(map[string]ResponseModifierFactory)

	  rsmModMap["APIContent"] = func(_ ...string) proxychain.ResponseModification {
    return tx.APIContent()
  }

  rsmModMap["TestCreateAPIErrReader"] = func(params ...string) proxychain.ResponseModification {
    return tx.TestCreateAPIErrReader(params[0])
  }

  rsmModMap["TestCreateAPIErrReader2"] = func(params ...string) proxychain.ResponseModification {
    return tx.TestCreateAPIErrReader2(params[0])
  }

  rsmModMap["BlockElementRemoval"] = func(params ...string) proxychain.ResponseModification {
    return tx.BlockElementRemoval(params[0])
  }

  rsmModMap["BypassCORS"] = func(_ ...string) proxychain.ResponseModification {
    return tx.BypassCORS()
  }

  rsmModMap["BypassContentSecurityPolicy"] = func(_ ...string) proxychain.ResponseModification {
    return tx.BypassContentSecurityPolicy()
  }

  rsmModMap["SetContentSecurityPolicy"] = func(params ...string) proxychain.ResponseModification {
    return tx.SetContentSecurityPolicy(params[0])
  }

  rsmModMap["ForwardResponseHeaders"] = func(_ ...string) proxychain.ResponseModification {
    return tx.ForwardResponseHeaders()
  }

  rsmModMap["GenerateReadableOutline"] = func(_ ...string) proxychain.ResponseModification {
    return tx.GenerateReadableOutline()
  }

  rsmModMap["InjectScriptBeforeDOMContentLoaded"] = func(params ...string) proxychain.ResponseModification {
    return tx.InjectScriptBeforeDOMContentLoaded(params[0])
  }

  rsmModMap["InjectScriptAfterDOMContentLoaded"] = func(params ...string) proxychain.ResponseModification {
    return tx.InjectScriptAfterDOMContentLoaded(params[0])
  }

  rsmModMap["InjectScriptAfterDOMIdle"] = func(params ...string) proxychain.ResponseModification {
    return tx.InjectScriptAfterDOMIdle(params[0])
  }

  rsmModMap["DeleteIncomingCookies"] = func(params ...string) proxychain.ResponseModification {
    return tx.DeleteIncomingCookies(params[0])
  }

  rsmModMap["DeleteIncomingCookiesExcept"] = func(params ...string) proxychain.ResponseModification {
    return tx.DeleteIncomingCookiesExcept(params[0])
  }

  rsmModMap["SetIncomingCookies"] = func(params ...string) proxychain.ResponseModification {
    return tx.SetIncomingCookies(params[0])
  }

  rsmModMap["SetIncomingCookie"] = func(params ...string) proxychain.ResponseModification {
    return tx.SetIncomingCookie(params[0], params[1])
  }

  rsmModMap["SetResponseHeader"] = func(params ...string) proxychain.ResponseModification {
    return tx.SetResponseHeader(params[0], params[1])
  }

  rsmModMap["DeleteResponseHeader"] = func(params ...string) proxychain.ResponseModification {
    return tx.DeleteResponseHeader(params[0])
  }

  rsmModMap["PatchDynamicResourceURLs"] = func(_ ...string) proxychain.ResponseModification {
    return tx.PatchDynamicResourceURLs()
  }

  rsmModMap["PatchGoogleAnalytics"] = func(_ ...string) proxychain.ResponseModification {
    return tx.PatchGoogleAnalytics()
  }

  rsmModMap["PatchTrackerScripts"] = func(_ ...string) proxychain.ResponseModification {
    return tx.PatchTrackerScripts()
  }

  rsmModMap["RewriteHTMLResourceURLs"] = func(_ ...string) proxychain.ResponseModification {
    return tx.RewriteHTMLResourceURLs()
  }

}